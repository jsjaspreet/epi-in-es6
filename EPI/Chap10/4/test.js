const test = require('ava')
const BinaryTree = require('../../util/BinaryTreeWithParent')
const { bruteParent } = require('./')

test('simple', t => {
  const x = new BinaryTree(1)
  const y = new BinaryTree(2)
  const z = new BinaryTree(3)
  x.addLeft(y)
  x.addRight(z)
  const a = bruteParent(y, z)
  t.is(a.data, 1)
})

test('complicated', t => {
  const x = new BinaryTree(1)
  const y = new BinaryTree(2)
  const z = new BinaryTree(3)
  const a = new BinaryTree(3)
  const b = new BinaryTree(3)
  const c = new BinaryTree(3)
  x.addLeft(y)
  x.addRight(z)
  z.addRight(a)
  a.addRight(b)
  y.addLeft(c)
  const lca = bruteParent(c, b)
  t.is(lca.data, 1)
})

test('complicated2', t => {
  const x = new BinaryTree(1)
  const y = new BinaryTree(2)
  const z = new BinaryTree(3)
  const a = new BinaryTree(3)
  const b = new BinaryTree(3)
  const c = new BinaryTree(3)
  x.addLeft(y)
  x.addRight(z)
  z.addRight(a)
  a.addRight(b)
  z.addLeft(c)
  const lca = bruteParent(c, b)
  t.is(lca.data, 3)
})
